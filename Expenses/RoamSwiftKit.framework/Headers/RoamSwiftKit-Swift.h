// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import ObjectiveC;
@import Foundation;
@import CoreData;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/**
  Basic tap gesture recognizer that automatically dismisses the keyboard as soon as a tap is registered
*/
SWIFT_CLASS("_TtC12RoamSwiftKit32KeyboardDismissGestureRecognizer")
@interface KeyboardDismissGestureRecognizer : UITapGestureRecognizer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action SWIFT_UNAVAILABLE;
@end

@class UIGestureRecognizer;
@class UITouch;

@interface KeyboardDismissGestureRecognizer (SWIFT_EXTENSION(RoamSwiftKit)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer;
@end


/**
  Protocol that can be implemented by a UIViewController for observing keyboard notifications
*/
SWIFT_PROTOCOL("_TtP12RoamSwiftKit19KeyboardObservation_")
@protocol KeyboardObservation
@optional
/**
  Callback method for UIKeyboardWillChangeFrameNotification
*/
- (void)keyboardWithWillChangeFrame:(NSNotification * _Nonnull)notification;
/**
  Callback method for UIKeyboardDidChangeFrameNotification
*/
- (void)keyboardWithDidChangeFrame:(NSNotification * _Nonnull)notification;
/**
  Callback method for UIKeyboardWillShowNotification
*/
- (void)keyboardWithWillShow:(NSNotification * _Nonnull)notification;
/**
  Callback method for UIKeyboardDidShowNotification
*/
- (void)keyboardWithDidShow:(NSNotification * _Nonnull)notification;
/**
  Callback method for UIKeyboardWillHideNotification
*/
- (void)keyboardWithWillHide:(NSNotification * _Nonnull)notification;
/**
  Callback method for UIKeyboardDidHideNotification
*/
- (void)keyboardWithDidHide:(NSNotification * _Nonnull)notification;
@end


@interface NSAttributedString (SWIFT_EXTENSION(RoamSwiftKit))
@end


@interface NSFetchedResultsController (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Execute the fetch request, and crash on failure
  This way you don’t need a do-try-catch
*/
- (void)safePerformFetch;
@end


@interface NSManagedObject (SWIFT_EXTENSION(RoamSwiftKit))
@end


@interface NSManagedObjectContext (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Attempt to save the context, without throwing an exception on failure.
  Rolls back if the save was unsuccessful, does not save unless the context has changes.
*/
- (void)safeSave;
/**
  Attempt to save the current context, and all it’s parent contexts, without throwing an exception on failure.
  Rolls back if the save was unsuccessful, does not save unless the context has changes.
  Turns newly created objectID’s into permanent ones.
*/
- (void)saveToRoot;
/**
  Asynchronously performs the block on the context’s queue.
  Encapsulates an autorelease pool, a call to processPendingChanges, and saveContext
*/
- (void)saveWithBlock:(void (^ _Nonnull)(void))block;
/**
  Synchronously performs the block on the context’s queue, and saves the context.
  May be called re-entrantly, however doing so will save the context multiple times which may be undesirable.
*/
- (void)saveAndWaitWithBlock:(void (^ _Nonnull)(void))block;
@end


@interface NSMutableAttributedString (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Adds the characters contained in the string along with the given attributes to the end of the receiver
*/
- (void)appendWithString:(NSString * _Nonnull)string attributes:(NSDictionary<NSString *, id> * _Nonnull)attributes;
@end


@interface NSPredicate (SWIFT_EXTENSION(RoamSwiftKit))
@end


@interface NSString (SWIFT_EXTENSION(RoamSwiftKit))
@end


@interface UICollectionView (SWIFT_EXTENSION(RoamSwiftKit))
@end

@class UICollectionViewCell;
@class UICollectionReusableView;

@interface UICollectionView (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Register a cell class, using an implicit identifier
*/
- (void)registerWithCellClass:(SWIFT_METATYPE(UICollectionViewCell) _Nonnull)cellClass;
/**
  Register a supplementary view class, using an implicit identifier
*/
- (void)registerWithSupplementaryViewClass:(SWIFT_METATYPE(UICollectionReusableView) _Nonnull)viewClass for:(NSString * _Nonnull)elementKind;
/**
  Dequeue a reusable cell, using the provided class’s implicit identifier
*/
- (UICollectionViewCell * _Nonnull)dequeueWithReusableCellWithClass:(SWIFT_METATYPE(UICollectionViewCell) _Nonnull)cellClass forIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  Dequeue a reusable supplementary view, using the provided class’s implicit identifier
*/
- (UICollectionReusableView * _Nonnull)dequeueWithReusableSupplementaryViewOfKind:(NSString * _Nonnull)elementKind viewClass:(SWIFT_METATYPE(UICollectionReusableView) _Nonnull)viewClass forIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface UIColor (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Initialize a color using 0-255 RGBA values
*/
- (nonnull instancetype)initWithRed256:(uint8_t)red256 green256:(uint8_t)green256 blue256:(uint8_t)blue256 alpha:(CGFloat)alpha;
/**
  Initialize a color using 0-255 RGBA values, with a 0-255 alpha value
*/
- (nonnull instancetype)initWithRed256:(uint8_t)red256 green256:(uint8_t)green256 blue256:(uint8_t)blue256 alpha256:(uint8_t)alpha256;
/**
  Initialize a color using an RGBA Hexadecimal representation
*/
- (nonnull instancetype)initWithRGBA:(uint32_t)RGBA;
/**
  Initialize a color using an ARGB Hexadecimal representation
*/
- (nonnull instancetype)initWithARGB:(uint32_t)ARGB;
/**
  Initialize a color using an RGB Hexadecimal representation
*/
- (nonnull instancetype)initWithRGB:(uint32_t)RGB;
/**
  Generate a random color
*/
+ (nonnull instancetype)randomColor;
@end


@interface UIImage (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Create an image with a given color (can be clear), at a given size
*/
+ (UIImage * _Nonnull)createWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
/**
  Resize this image to a new size.
  Note that this ignores screen scale, and rotates the image according to its orientation.
*/
- (UIImage * _Nonnull)resizedWithNewSize:(CGSize)newSize;
@end


@interface UIResponder (SWIFT_EXTENSION(RoamSwiftKit)) <KeyboardObservation>
@end


@interface UIResponder (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Automatically starts or ends keyboard observation
*/
@property (nonatomic) BOOL observingKeyboardEvents;
/**
  Last keyboard notification received
*/
@property (nonatomic, readonly, copy) NSNotification * _Nullable lastKeyboardNotification;
@end


@interface UIScrollView (SWIFT_EXTENSION(RoamSwiftKit))
/**
  The amount that the scrollIndicatorInset has been adjusted from keyboard notifications
*/
@property (nonatomic) CGFloat keyboardScrollIndicatorInsetOffset;
/**
  The amount that the contentInset has been adjusted from keyboard notifications
*/
@property (nonatomic) CGFloat keyboardContentInsetOffset;
/**
  Update a scrollView’s insets from a keyboard notification
*/
- (void)updateInsetsFromKeyboardNotification:(NSNotification * _Nonnull)notification animated:(BOOL)animated animateAlongside:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animateAlongside;
@end


@interface UITableView (SWIFT_EXTENSION(RoamSwiftKit))
@end

@class UITableViewCell;
@class UITableViewHeaderFooterView;

@interface UITableView (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Register a cell class, using an implicit identifier
*/
- (void)registerWithCellClass:(SWIFT_METATYPE(UITableViewCell) _Nonnull)cellClass;
/**
  Register a headerFooterView class, using an implicit identifier
*/
- (void)registerWithHeaderFooterViewClass:(SWIFT_METATYPE(UITableViewHeaderFooterView) _Nonnull)viewClass;
/**
  Dequeue a reusable cell class, using the provided class’s an implicit identifier
*/
- (UITableViewCell * _Nonnull)dequeueWithReusableCellWithClass:(SWIFT_METATYPE(UITableViewCell) _Nonnull)cellClass forIndexPath:(NSIndexPath * _Nonnull)indexPath;
/**
  Dequeue a reusable headerFooterView class, using the provided class’s an implicit identifier
*/
- (UITableViewHeaderFooterView * _Nonnull)dequeueWithReusableHeaderFooterViewWithClass:(SWIFT_METATYPE(UITableViewHeaderFooterView) _Nonnull)viewClass;
- (CGSize)calculateContentSize;
@end


@interface UIView (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Frame for filling this view within it’s superview. If there is no superview, this returns a zero frame
  Insets are used to create padding around the view.
*/
- (CGRect)fillFrameWithInsets:(UIEdgeInsets)insets;
/**
  Bound this view, with a given a size, to the center of it’s superview. If there is no superview, this returns a zero frame
  Offset is used to adjust the view’s position.
  Creates layout constraints that keep the view centered.
*/
- (CGRect)centerFrameWithSize:(CGSize)size offset:(CGPoint)offset;
@end


@interface UIView (SWIFT_EXTENSION(RoamSwiftKit))
/**
  Initialise a view (with no frame), and add it to a superview.
*/
- (nonnull instancetype)initWithSuperview:(UIView * _Nonnull)superview;
/**
  Initialise a view, add it to a superview, and fill that superview with the newly initialised view.
  Insets are used to create padding around the view.
  Creates layout constraints that make the view stay filled.
*/
- (nonnull instancetype)initWithSuperviewToFill:(UIView * _Nonnull)superviewToFill insets:(UIEdgeInsets)insets;
/**
  Initialise a view with a frame, and add it to a superview.
  Optionally set a autoresizing mask.
*/
- (nonnull instancetype)initWithSuperview:(UIView * _Nonnull)superview frame:(CGRect)frame autoresizing:(UIViewAutoresizing)autoresizing;
/**
  Initialise a view with a size.
*/
- (nonnull instancetype)initWithSize:(CGSize)size;
/**
  Initialise a view with a size, and add it to a superview.
*/
- (nonnull instancetype)initWithSuperview:(UIView * _Nonnull)superview size:(CGSize)size;
/**
  Initialise a view with a size, centered on a given point, and add it to a superview.
*/
- (nonnull instancetype)initWithSuperview:(UIView * _Nonnull)superview size:(CGSize)size center:(CGPoint)center;
/**
  Initialise a view with a size, centered within a given superview.
  Offset is used to adjust the view’s position.
  Creates layout constraints that keep the view centered.
*/
- (nonnull instancetype)initWithSuperviewToCenterIn:(UIView * _Nonnull)superviewToCenterIn size:(CGSize)size offset:(CGPoint)offset;
/**
  Fill this view within it’s superview. If there is no superview, this does nothing.
  Insets are used to create padding around the view.
  Creates layout constraints that make the view stay filled.
*/
- (void)fillWithInsets:(UIEdgeInsets)insets useAutoLayout:(BOOL)useAutoLayout;
/**
  Bound this view, with a given a size, to the center of it’s superview. If there is no superview, this does nothing.
  Offset is used to adjust the view’s position.
  Creates layout constraints that keep the view centered.
*/
- (void)alignToCenterWithSize:(CGSize)size offset:(CGPoint)offset useAutoLayout:(BOOL)useAutoLayout;
/**
  Find the closest common ancestor of this view, and another given view. Useful for constraint purposes.
  Returns nil if there is none.
*/
- (UIView * _Nullable)commonAncestor:(UIView * _Nonnull)otherView;
@end


@interface UIView (SWIFT_EXTENSION(RoamSwiftKit))
/**
  The distance this view is from the top of it’s superview. If this view has no superview, behaviour is undefined
  Setting this adjusts the layout constraints (as necessary), unless translatesAutoresizingMaskIntoConstraints is true
*/
@property (nonatomic) CGFloat distanceTop;
/**
  The distance this view is from the bottom of it’s superview. If this view has no superview, behaviour is undefined
  Setting this adjusts the layout constraints (as necessary), unless translatesAutoresizingMaskIntoConstraints is true
*/
@property (nonatomic) CGFloat distanceBottom;
/**
  The distance this view is from the left of it’s superview. If this view has no superview, behaviour is undefined
  Setting this adjusts the layout constraints (as necessary), unless translatesAutoresizingMaskIntoConstraints is true
*/
@property (nonatomic) CGFloat distanceLeft;
/**
  The distance this view is from the right of it’s superview. If this view has no superview, behaviour is undefined
  Setting this adjusts the layout constraints (as necessary), unless translatesAutoresizingMaskIntoConstraints is true
*/
@property (nonatomic) CGFloat distanceRight;
/**
  Alias for distanceTop
*/
@property (nonatomic) CGFloat y;
/**
  Alias for distanceLeft
*/
@property (nonatomic) CGFloat x;
/**
  Alias for both distanceTop and distanceLeft
  Note: UIView has a private property named origin that will conflict if this is named origin :(
*/
@property (nonatomic) CGPoint rmOrigin;
/**
  The width of this view.
  If this view is not using autoresizingMasks, and does not have a specific width constraint, behaviour is undefined.
*/
@property (nonatomic) CGFloat width;
/**
  The height of this view.
  If this view is not using autoresizingMasks, and does not have a specific height constraint, behaviour is undefined.
*/
@property (nonatomic) CGFloat height;
/**
  Alias for both width and height
*/
@property (nonatomic) CGSize size;
/**
  The intersection between the status bar and this view (or a zero rect if not applicable)
*/
@property (nonatomic, readonly) CGRect statusBarFrame;
@end

#pragma clang diagnostic pop
